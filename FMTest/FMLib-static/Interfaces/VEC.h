#pragma once
//#include "stdafx.h"
#include <vector>
#include <boost\function.hpp>
#include "CommonTypes\Except.h"


class VEC
{
private:
	VEC(){}
	~VEC(){}
public:

	/*sort wrap*/
	template<class _T> static std::vector<_T> Sort(std::vector<_T> vec_, boost::function<bool(_T&, _T&)> f_);
	template<class _T> static void Sort_M(std::vector<_T>& vec_, boost::function<bool(_T&, _T&)> f_);

	/*delete same elements*/
	template<class _T> static std::vector<_T> RemoveCollisions(std::vector<_T> vec_, boost::function<bool(_T&, _T&)> f_);
	template<class _T> static void RemoveCollisions_M(std::vector<_T>& vec_, boost::function<bool(_T&, _T&)> f_);

	/*find and delete specific element once*/
	template<class _T> static std::vector<_T> DelOnce(std::vector<_T> vec_, _T element_, boost::function<bool(_T&, _T&)> f_);
	template<class _T> static void DelOnce_M(std::vector<_T>& vec_, _T& element_, boost::function<bool(_T&, _T&)> f_);

	/*find and delete specific element ALL*/
	template<class _T> static std::vector<_T> DelALL(std::vector<_T> vec_, _T element_, boost::function<bool(_T&, _T&)> f_);
	template<class _T> static void DelALL_M(std::vector<_T>& vec_, _T& element_, boost::function<bool(_T&, _T&)> f_);

};
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
template<class _T> static std::vector<_T> VEC::RemoveCollisions(std::vector<_T> vec_, boost::function<bool(_T&, _T&)> f_)
{
	unsigned j;
	for (unsigned i = 0; i < vec_.size() - 1; ++i)
	{
		j = i + 1;
		while (j < vec_.size())
		{
			if (f_(vec_[i], vec_[j])) vec_.erase(vec_.begin() + j);
			else ++j;
		}
	}
	return vec_;
}
//*///-------------------------------------
template<class _T> static void VEC::RemoveCollisions_M(std::vector<_T>& vec_, boost::function<bool(_T&, _T&)> f_)
{
	unsigned j;
	for (unsigned i = 0; i < vec_.size() - 1; ++i)
	{
		j = i + 1;
		while (j < vec_.size())
		{
			if (f_(vec_[i], vec_[j])) vec_.erase(vec_.begin() + j);
			else ++j;
		}
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
template<class _T> static std::vector<_T> VEC::DelOnce(std::vector<_T> vec_, _T element_, boost::function<bool(_T&, _T&)> f_)
{
	for (unsigned i = 0; i < vec_.size();++i)
	{
		if (f_(vec_[i], element_)) 
		{ 
			vec_.erase(vec_.begin() + i);
			break;
		}
	}
	return vec_;
}
//*///-------------------------------------
template<class _T> static void VEC::DelOnce_M(std::vector<_T>& vec_, _T& element_, boost::function<bool(_T&, _T&)> f_)
{
	for (unsigned i = 0; i < vec_.size(); ++i)
	{
		if (f_(vec_[i], element_))
		{
			vec_.erase(vec_.begin() + i);
			return;
		}
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
template<class _T> static std::vector<_T> VEC::DelALL(std::vector<_T> vec_, _T element_, boost::function<bool(_T&, _T&)> f_)
{
	unsigned i = 0;
	while (i < vec_.size())
	{
		if (f_(vec_[i], element_)) vec_.erase(vec_.begin() + i);
		else ++i;
	}
	return vec_;
}
//*///-------------------------------------
template<class _T> static void VEC::DelALL_M(std::vector<_T>& vec_, _T& element_, boost::function<bool(_T&, _T&)> f_)
{
	unsigned i = 0;
	while (i < vec_.size())
	{
		if (f_(vec_[i], element_)) vec_.erase(vec_.begin() + i);
		else ++i;
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
template<class _T> static std::vector<_T> VEC::Sort(std::vector<_T> vec_, boost::function<bool(_T&, _T&)> f_)
{
	sort(vec_.begin(), vec_.end(), f_);
	return vec_;
}
//*///-------------------------------------
template<class _T> static void VEC::Sort_M(std::vector<_T>& vec_, boost::function<bool(_T&, _T&)> f_)
{
	sort(vec_.begin(), vec_.end(), f_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------


