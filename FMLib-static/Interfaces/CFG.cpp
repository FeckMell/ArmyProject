#include "stdafx.h"
#include "CFG.h"

using namespace std;
ValStoreLineT<string> CFG::thatData;

string CFG::Val(string name_)
{
	return thatData.Val(name_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::SetVal(string name_, string value_)
{
	thatData.SetVal(name_, value_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::SetVal(std::string node_name_, ValStoreLineT<std::string> data_)
{
	thatData.SetValSubTree(node_name_, data_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::SetVal(string node_name_, map<string, string> data_)
{
	thatData.SetValSubTree(node_name_, data_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
string CFG::ToString()
{
	string result = "\nConfiguration params:\n";
	result += thatData.ToString();
	return result;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::SetValFromFile(std::string path_, string filename_)
{
		ProcessPath(path_, filename_);
		ParseFile(filename_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::ProcessPath(string path_, string filename_)
{
	thatData.SetVal("CFG.Path", path_);
	thatData.SetVal("CFG.Name", filename_);

}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::ParseFile(string filename_)
{
	ifstream file;
	file.open(Val("CFG.Path") + filename_);
	if (file.is_open())
	{
		string file_line;
		vector<string> results;

		while (getline(file, file_line) && (file_line.substr(0, 3) != "***"))
		{
			results = STR::StrToVec(file_line, "=");
			SetVal(results[0], results[1]);
		}
		file.close();
	}
	else { SetVal("Error", "Could not open " + Val("CFG.Path") + filename_ + " file. Check its existanse or name.\n"); }
	if (!Val("Error").empty())
	{
		Except error(Val("Error"));
		error.Push("CFG file not found");
		throw  error;
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void CFG::Finalize()
{
	if (Val("Home.Path").empty()) SetVal("Home.Path", Val("CFG.Path"));
	if (Val("Logs.Path").empty()) SetVal("Logs.Path", Val("Home.Path"));
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------