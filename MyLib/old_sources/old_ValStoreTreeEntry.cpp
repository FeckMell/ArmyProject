#include "stdafx.h"
#include "ValStoreTreeEntry.h"
using namespace std;
typedef ValStoreTreeEntry VSTE;

string VSTE::PrintAll(unsigned lvl_)
{
	lvl_++;
	string space = STR::GenMultTimes(" ", lvl_/* * 2*/);
	string result = thatData;
	for ( auto&e : thatDataTree )
	{
		result += "\n" + space + e.first + "_=" + e.second.PrintAll(lvl_);
	}
	return result;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
string VSTE::Val(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 ) return thatData;
	else
	{
		lvl_++;
		return thatDataTree[name_[lvl_]].Val(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void VSTE::SetVal(vector<string> name_, unsigned& lvl_, string val_)
{
	if ( lvl_ == name_.size() - 1 )
	{
		thatData = val_;
		thatName = name_[lvl_];
	}
	else
	{
		lvl_++;
		thatDataTree[name_[lvl_]].SetVal(name_, lvl_, val_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void VSTE::DelVal(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 ) thatData = "";
	else
	{
		lvl_++;
		thatDataTree[name_[lvl_]].DelVal(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
VSTE VSTE::ValSubTree(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 ) return *this;
	else
	{
		lvl_++;
		return thatDataTree[name_[lvl_]].ValSubTree(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
string VSTE::NodeName(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 ) return thatName;
	else
	{
		lvl_++;
		return thatDataTree[name_[lvl_]].NodeName(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
vector<string> VSTE::ChildNodesNames(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 )
	{
		vector<string> result;
		for ( auto& e : thatDataTree ) result.push_back(e.first);
		return result;
	}
	else
	{
		lvl_++;
		return thatDataTree[name_[lvl_]].ChildNodesNames(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
map<string, VSTE> VSTE::ChildNodes(vector<string> name_, unsigned& lvl_)
{
	if ( lvl_ == name_.size() - 1 ) return thatDataTree;
	else
	{
		lvl_++;
		return thatDataTree[name_[lvl_]].ChildNodes(name_, lvl_);
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
